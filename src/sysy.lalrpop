use crate::ast::*;
// lalrpop里面的约定
grammar;

// 约束lexer的行为
match {
  r"\s*" => {}, // 空白符
  r"//[^\n\r]*[\n\r]*" => {}, // 注释
  r"\/\*([^\*]|\*+[^\/\*])*\*+\/" => {}, // 多行注释
  "<=",
  ">=",
  "!=",
  "==",
  "&&",
  "||"
} else {
  _ // 剩下的情况
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp : Exp = <l_or_exp: LOrExp> => Exp { <> };

PrimaryExp : PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
  <num: Number> => PrimaryExp::Number(num),
}


UnaryExp : UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new(primary_exp)),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryExp(unary_op, Box::new(unary_exp)),
}

UnaryOp : UnaryOp = {
  "+" => UnaryOp::Add,
  "-" => UnaryOp::Sub,
  "!" => UnaryOp::Rev,
}

MulOp : MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp : AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

MulExp : MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(unary_exp),
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> =>
    MulExp::MulExp(Box::new(mul_exp), mul_op, unary_exp),
}

AddExp : AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(mul_exp),
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> =>
    AddExp::AddExp(Box::new(add_exp), add_op, mul_exp),
}

RelOp : RelOp = {
  "<" => RelOp::Lt,
  "<=" => RelOp::Le,
  ">" => RelOp::Gt,
  ">=" => RelOp::Ge,
}

RelExp : RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(add_exp),
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> =>
    RelExp::RelExp(Box::new(rel_exp), rel_op, add_exp),
}

EqOp : EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

EqExp : EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(rel_exp),
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> =>
    EqExp::EqExp(Box::new(eq_exp), eq_op, rel_exp),
}

LAndOp : LAndOp = "&&" => LAndOp::And;

LAndExp : LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(eq_exp),
  <l_and_exp: LAndExp> <l_and_op: LAndOp> <eq_exp: EqExp> =>
    LAndExp::LAndExp(Box::new(l_and_exp), l_and_op, eq_exp),
}

LOrOp : LOrOp = "||" => LOrOp::Or;

LOrExp : LOrExp = {
  <l_and_exp: LAndExp> => LOrExp::LAndExp(l_and_exp),
  <l_or_exp: LOrExp> <l_or_op: LOrOp> <l_and_exp: LAndExp> =>
    LOrExp::LOrExp(Box::new(l_or_exp), l_or_op, l_and_exp),
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Number: Number = <int_const: INT_CONST> => Number::IntConst(int_const);

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
INT_CONST: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

